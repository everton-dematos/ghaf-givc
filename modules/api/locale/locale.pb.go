// Copyright 2024 TII (SSRC) and the Ghaf contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: locale/locale.proto

package locale

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Locale macros as defined in [locale(7)](https://man7.org/linux/man-pages/man7/locale.7.html)
type LocaleMacroKey int32

const (
	LocaleMacroKey_LANG              LocaleMacroKey = 0
	LocaleMacroKey_LC_ADDRESS        LocaleMacroKey = 1
	LocaleMacroKey_LC_COLLATE        LocaleMacroKey = 2
	LocaleMacroKey_LC_CTYPE          LocaleMacroKey = 3
	LocaleMacroKey_LC_IDENTIFICATION LocaleMacroKey = 4
	LocaleMacroKey_LC_MONETARY       LocaleMacroKey = 5
	LocaleMacroKey_LC_MESSAGES       LocaleMacroKey = 6
	LocaleMacroKey_LC_MEASUREMENT    LocaleMacroKey = 7
	LocaleMacroKey_LC_NAME           LocaleMacroKey = 8
	LocaleMacroKey_LC_NUMERIC        LocaleMacroKey = 9
	LocaleMacroKey_LC_PAPER          LocaleMacroKey = 10
	LocaleMacroKey_LC_TELEPHONE      LocaleMacroKey = 11
	LocaleMacroKey_LC_TIME           LocaleMacroKey = 12
	LocaleMacroKey_LC_ALL            LocaleMacroKey = 13
)

// Enum value maps for LocaleMacroKey.
var (
	LocaleMacroKey_name = map[int32]string{
		0:  "LANG",
		1:  "LC_ADDRESS",
		2:  "LC_COLLATE",
		3:  "LC_CTYPE",
		4:  "LC_IDENTIFICATION",
		5:  "LC_MONETARY",
		6:  "LC_MESSAGES",
		7:  "LC_MEASUREMENT",
		8:  "LC_NAME",
		9:  "LC_NUMERIC",
		10: "LC_PAPER",
		11: "LC_TELEPHONE",
		12: "LC_TIME",
		13: "LC_ALL",
	}
	LocaleMacroKey_value = map[string]int32{
		"LANG":              0,
		"LC_ADDRESS":        1,
		"LC_COLLATE":        2,
		"LC_CTYPE":          3,
		"LC_IDENTIFICATION": 4,
		"LC_MONETARY":       5,
		"LC_MESSAGES":       6,
		"LC_MEASUREMENT":    7,
		"LC_NAME":           8,
		"LC_NUMERIC":        9,
		"LC_PAPER":          10,
		"LC_TELEPHONE":      11,
		"LC_TIME":           12,
		"LC_ALL":            13,
	}
)

func (x LocaleMacroKey) Enum() *LocaleMacroKey {
	p := new(LocaleMacroKey)
	*p = x
	return p
}

func (x LocaleMacroKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocaleMacroKey) Descriptor() protoreflect.EnumDescriptor {
	return file_locale_locale_proto_enumTypes[0].Descriptor()
}

func (LocaleMacroKey) Type() protoreflect.EnumType {
	return &file_locale_locale_proto_enumTypes[0]
}

func (x LocaleMacroKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocaleMacroKey.Descriptor instead.
func (LocaleMacroKey) EnumDescriptor() ([]byte, []int) {
	return file_locale_locale_proto_rawDescGZIP(), []int{0}
}

type LocaleAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           LocaleMacroKey         `protobuf:"varint,1,opt,name=key,proto3,enum=locale.LocaleMacroKey" json:"key,omitempty"` // e.g., LC_TIME, LC_NUMERIC
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                         // e.g., en_US.UTF-8
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocaleAssignment) Reset() {
	*x = LocaleAssignment{}
	mi := &file_locale_locale_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocaleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleAssignment) ProtoMessage() {}

func (x *LocaleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_locale_locale_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleAssignment.ProtoReflect.Descriptor instead.
func (*LocaleAssignment) Descriptor() ([]byte, []int) {
	return file_locale_locale_proto_rawDescGZIP(), []int{0}
}

func (x *LocaleAssignment) GetKey() LocaleMacroKey {
	if x != nil {
		return x.Key
	}
	return LocaleMacroKey_LANG
}

func (x *LocaleAssignment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LocaleMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Assignments   []*LocaleAssignment    `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"` // List of locale assignments
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocaleMessage) Reset() {
	*x = LocaleMessage{}
	mi := &file_locale_locale_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocaleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleMessage) ProtoMessage() {}

func (x *LocaleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_locale_locale_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleMessage.ProtoReflect.Descriptor instead.
func (*LocaleMessage) Descriptor() ([]byte, []int) {
	return file_locale_locale_proto_rawDescGZIP(), []int{1}
}

func (x *LocaleMessage) GetAssignments() []*LocaleAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type TimezoneMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timezone      string                 `protobuf:"bytes,1,opt,name=Timezone,proto3" json:"Timezone,omitempty"` // String with timezone value. Format: [tz database](https://en.wikipedia.org/wiki/Tz_database) name, usually Area/City or Etc/GMT+3.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimezoneMessage) Reset() {
	*x = TimezoneMessage{}
	mi := &file_locale_locale_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimezoneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimezoneMessage) ProtoMessage() {}

func (x *TimezoneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_locale_locale_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimezoneMessage.ProtoReflect.Descriptor instead.
func (*TimezoneMessage) Descriptor() ([]byte, []int) {
	return file_locale_locale_proto_rawDescGZIP(), []int{2}
}

func (x *TimezoneMessage) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

// Empty message
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_locale_locale_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_locale_locale_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_locale_locale_proto_rawDescGZIP(), []int{3}
}

var File_locale_locale_proto protoreflect.FileDescriptor

const file_locale_locale_proto_rawDesc = "" +
	"\n" +
	"\x13locale/locale.proto\x12\x06locale\"R\n" +
	"\x10LocaleAssignment\x12(\n" +
	"\x03key\x18\x01 \x01(\x0e2\x16.locale.LocaleMacroKeyR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"K\n" +
	"\rLocaleMessage\x12:\n" +
	"\vassignments\x18\x01 \x03(\v2\x18.locale.LocaleAssignmentR\vassignments\"-\n" +
	"\x0fTimezoneMessage\x12\x1a\n" +
	"\bTimezone\x18\x01 \x01(\tR\bTimezone\"\a\n" +
	"\x05Empty*\xeb\x01\n" +
	"\x0eLocaleMacroKey\x12\b\n" +
	"\x04LANG\x10\x00\x12\x0e\n" +
	"\n" +
	"LC_ADDRESS\x10\x01\x12\x0e\n" +
	"\n" +
	"LC_COLLATE\x10\x02\x12\f\n" +
	"\bLC_CTYPE\x10\x03\x12\x15\n" +
	"\x11LC_IDENTIFICATION\x10\x04\x12\x0f\n" +
	"\vLC_MONETARY\x10\x05\x12\x0f\n" +
	"\vLC_MESSAGES\x10\x06\x12\x12\n" +
	"\x0eLC_MEASUREMENT\x10\a\x12\v\n" +
	"\aLC_NAME\x10\b\x12\x0e\n" +
	"\n" +
	"LC_NUMERIC\x10\t\x12\f\n" +
	"\bLC_PAPER\x10\n" +
	"\x12\x10\n" +
	"\fLC_TELEPHONE\x10\v\x12\v\n" +
	"\aLC_TIME\x10\f\x12\n" +
	"\n" +
	"\x06LC_ALL\x10\r2|\n" +
	"\fLocaleClient\x123\n" +
	"\tLocaleSet\x12\x15.locale.LocaleMessage\x1a\r.locale.Empty\"\x00\x127\n" +
	"\vTimezoneSet\x12\x17.locale.TimezoneMessage\x1a\r.locale.Empty\"\x00B\x19Z\x17givc/modules/api/localeb\x06proto3"

var (
	file_locale_locale_proto_rawDescOnce sync.Once
	file_locale_locale_proto_rawDescData []byte
)

func file_locale_locale_proto_rawDescGZIP() []byte {
	file_locale_locale_proto_rawDescOnce.Do(func() {
		file_locale_locale_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_locale_locale_proto_rawDesc), len(file_locale_locale_proto_rawDesc)))
	})
	return file_locale_locale_proto_rawDescData
}

var file_locale_locale_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_locale_locale_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_locale_locale_proto_goTypes = []any{
	(LocaleMacroKey)(0),      // 0: locale.LocaleMacroKey
	(*LocaleAssignment)(nil), // 1: locale.LocaleAssignment
	(*LocaleMessage)(nil),    // 2: locale.LocaleMessage
	(*TimezoneMessage)(nil),  // 3: locale.TimezoneMessage
	(*Empty)(nil),            // 4: locale.Empty
}
var file_locale_locale_proto_depIdxs = []int32{
	0, // 0: locale.LocaleAssignment.key:type_name -> locale.LocaleMacroKey
	1, // 1: locale.LocaleMessage.assignments:type_name -> locale.LocaleAssignment
	2, // 2: locale.LocaleClient.LocaleSet:input_type -> locale.LocaleMessage
	3, // 3: locale.LocaleClient.TimezoneSet:input_type -> locale.TimezoneMessage
	4, // 4: locale.LocaleClient.LocaleSet:output_type -> locale.Empty
	4, // 5: locale.LocaleClient.TimezoneSet:output_type -> locale.Empty
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_locale_locale_proto_init() }
func file_locale_locale_proto_init() {
	if File_locale_locale_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_locale_locale_proto_rawDesc), len(file_locale_locale_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_locale_locale_proto_goTypes,
		DependencyIndexes: file_locale_locale_proto_depIdxs,
		EnumInfos:         file_locale_locale_proto_enumTypes,
		MessageInfos:      file_locale_locale_proto_msgTypes,
	}.Build()
	File_locale_locale_proto = out.File
	file_locale_locale_proto_goTypes = nil
	file_locale_locale_proto_depIdxs = nil
}
